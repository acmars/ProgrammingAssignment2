install.packages("swirl")
library("swirl")
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
?knitr
??knitr
?rparts
install.packages("slidify")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
?KernSmooth
??KernSmooth
?t.test()
19+10+15+8+5
57+35
19+10+5+10+8+10+25+5
complete=function(directory,id=1:332){
files_list=list.files(directory,full.names=TRUE)
dat=data.frame()
for (i in 1:332){
dat=rbind(dat,read.csv(files_list[i]))
}
for (i in id){
nobs= numeric()
nobs=c(dat, ID %in% c( id ))
}
return(data.frame(id,nobs))
setwd("~/Coursera Data Science")
complete=function(directory,id=1:332){
files_list=list.files(directory,full.names=TRUE)
dat=data.frame()
for (i in 1:332){
dat=rbind(dat,read.csv(files_list[i]))
}
for (i in id){
nobs= numeric()
nobs=c(dat, ID %in% c( id ))
}
return(data.frame(id,nobs))
setwd("~/Coursera Data Science")
complete=function(directory,id=1:332){
files_list=list.files(directory,full.names=TRUE)
dat=data.frame()
for (i in 1:332){
dat=rbind(dat,read.csv(files_list[i]))
}
for (i in id){
nobs= numeric()
nobs=c(dat, ID %in% c( id ))
}
return(data.frame(id,nobs))
complete("specdata",1)
complete=function(directory,id=1:332){
files_list=list.files(directory,full.names=TRUE)
dat=data.frame()
for (i in 1:332){
dat=rbind(dat,read.csv(files_list[i]))
}
for (i in id){
nobs= numeric()
nobs=c(dat, ID %in% c( id ))
}
return(data.frame(id,nobs))
}
complete("specdata",1)
complete=function(directory,id=1:332){
files_list=list.files(directory,full.names=TRUE)
dat=data.frame()
for (i in 1:332){
dat=rbind(dat,read.csv(files_list[i]))
}
for (i in id){
nobs= numeric()
nobs=c(dat, "ID" %in% c( id ))
}
return(data.frame(id,nobs))
}
complete=function(directory,id=1:332){
files_list=list.files(directory,full.names=TRUE)
dat=data.frame()
for (i in 1:332){
dat=rbind(dat,read.csv(files_list[i]))
}
for (i in id){
nobs= numeric()
nobs=c(dat, "ID" %in% c( id ))
}
return(data.frame(id,nobs))
}
complete("specdata",1)
complete=function(directory,id=1:332){
files_list=list.files(directory,full.names=TRUE)
dat=data.frame()
for (i in id){
dat=rbind(dat,read.csv(files_list[i]))
sum(complete.cases(dat))
}
nobs= sapply(id,dat)
return(data.frame(id,nobs))
}
complete("specdata",1)
complete=function(directory,id=1:332){
files_list=list.files(directory,full.names=TRUE)
dat=data.frame()
for (i in id){
dat=rbind(dat,read.csv(files_list[i]))
sum(complete.cases(dat))
nobs= sapply(id,dat)
}
return(data.frame(id,nobs))
}
complete("specdata",1)
complete=function(directory,id=1:332){
files_list=list.files(directory,full.names=TRUE)
dat=data.frame()
for (i in id){
dat=rbind(dat,read.csv(files_list[i]))
sum(complete.cases(dat))
nobs= sapply(id,dat)
}
return(id,nobs)
}
complete("specdata",1)
complete=function(directory,id=1:332){
files_list=list.files(directory,full.names=TRUE)
dat=data.frame()
for (i in 1:332){
dat=rbind(dat,read.csv(files_list[i]))
dat_subset= subset(dat, ID %in% c( id ))
nobs=numeric()
nobs=c(nobs,sum(complete.cases(dat_subset)))
}
return(data.frame(id,nobs))
}
complete("specdata",1)
complete("specdata",30:25)
library(submit)
source("submitscript1.R"")
submit()
library(submitscript1.R)
source("submitscript1.R")
submit()
complete=function(directory,id=1:332){
files_list=list.files(directory,full.names=TRUE)
dat=data.frame()
for (i in id){
dat=rbind(dat,read.csv(files_list[i]))
dat_subset= subset(dat, ID %in% c( id ))
nobs=numeric()
nobs=c(nobs,sum(complete.cases(dat_subset)))
}
return(data.frame(id,nobs))
}
complete("specdata",1)
complete("specdata",30:25)
complete=function(directory,id=1:332){
files_list=list.files(directory,full.names=TRUE)
dat=data.frame()
for (i in id){
dat=rbind(dat,read.csv(files_list[i]))
dat_subset= subset(dat, ID %in% c( id ))
nobs=numeric()
nobs=sapply(id,dat_subset)
}
return(data.frame(id,nobs))
}
complete("specdata",1)
help(%in%)
??%in%
?%in%
?subset
?paste
complete=function(directory,id=1:332){
files_list=list.files(directory,full.names=TRUE)
dat=data.frame()
nobs=numeric()
for (i in id){
dat=rbind(dat,read.csv(files_list[i]))
dat_subset= paste(directory,"/")
nobs=c(nobs,sum(complete.cases(dat_subset)))
}
return(data.frame(id,nobs))
}
complete("specdata",1)
complete("specdata",30:25)
complete=function(directory,id=1:332){
files_list=list.files(directory,full.names=TRUE)
dat=data.frame()
nobs=numeric()
for (i in id){
dat=rbind(dat,read.csv(files_list[i]))
dat_subset= paste(dat,"/",formatC(i,width=3,flag="0"))
nobs=c(nobs,sum(complete.cases(dat_subset)))
}
return(data.frame(id,nobs))
}
complete("specdata",1)
complete=function(directory,id=1:332){
files_list=list.files(directory,full.names=TRUE)
dat=data.frame()
nobs=numeric()
for (i in id){
dat=rbind(dat,read.csv(files_list[i]))
dat_subset= dat(paste(directory,"/",formatC(i,width=3,flag="0"))
nobs=c(nobs,sum(complete.cases(dat_subset)))
}
return(data.frame(id,nobs))
}
complete=function(directory,id=1:332){
files_list=list.files(directory,full.names=TRUE)
dat=data.frame()
nobs=numeric()
for (i in id){
dat=rbind(dat,read.csv(files_list[i]))
dat_subset= dat(paste(directory,"/",formatC(i,width=3,flag="0"))
nobs=c(nobs,sum(complete.cases(dat_subset))
}
return(data.frame(id,nobs))
}
complete("specdata",1)
complete=function(directory,id=1:332){
files_list=list.files(directory,full.names=TRUE)
dat=data.frame()
nobs=numeric()
for (i in id){
dat_subset= read.csv(paste(directory,"/",formatC(i,width=3,flag="0")),".csv")
nobs=c(nobs,sum(complete.cases(dat_subset))
}
return(data.frame(id,nobs))
}
complete("specdata",1)
complete=function(directory,id=1:332){
files_list=list.files(directory,full.names=TRUE)
nobs=numeric()
for (i in id){
dat_subset= read.csv(paste(directory,"/",formatC(i,width=3,flag="0"),".csv",sep=""))
nobs=c(nobs,sum(complete.cases(dat_subset))
}
return(data.frame(id,nobs))
}
complete("specdata",1)
complete=function(directory,id=1:332){
nobs=numeric()
for (i in id){
dat_subset= read.csv(paste(directory,"/",formatC(i,width=3,flag="0"),".csv",sep=""))
nobs=c(nobs,sum(complete.cases(dat_subset)))
}
return(data.frame(id,nobs))
}
complete("specdata",nobs)
complete=function(directory,id=1:332){
nobs=numeric()
for (i in id){
dat_subset= read.csv(paste(directory,"/",formatC(i,width=3,flag="0"),
".csv",sep=""))
nobs=c(nobs,sum(complete.cases(dat_subset)))
}
return(data.frame(id,nobs))
}
complete("specdata",1)
complete("specdata",30:25)
complete("specdata",c(2,4,8,10,12))
complete("specdata",3)
?formatC
complete=function(directory,id=1:332){
nobs=numeric()
for (i in id){
dat_subset= read.csv(paste(directory,"/"),
".csv",sep=""))
nobs=c(nobs,sum(complete.cases(dat_subset)))
}
return(data.frame(id,nobs))
}
complete=function(directory,id=1:332){
nobs=numeric()
for (i in id){
dat_subset= read.csv(paste(directory,"/"),".csv",sep="")
nobs=c(nobs,sum(complete.cases(dat_subset)))
}
return(data.frame(id,nobs))
}
complete("specdata",3)
complete=function(directory,id=1:332){
nobs=numeric()
for (i in id){
dat_subset= read.csv(paste(directory,"/",formatC(i,width=3,flag="0"),
".csv",sep=""))
nobs=c(nobs,sum(complete.cases(dat_subset)))
}
return(data.frame(id,nobs))
}
complete("specdata",1)
complete("specdata",c(2,4,8,10,12))
complete("specdata",30:25)
complete("specdata",3)
?sapply
complete=function(directory,id=1:332){
nobs=numeric()
for (i in id){
dat_subset= read.csv(paste(directory,"/",formatC(i,width=3,flag="0"),
".csv",sep=""))
nobs=sapply(id,complete.cases(dat_subset)))
}
return(data.frame(id,nobs))
}
complete=function(directory,id=1:332){
nobs=numeric()
for (i in id){
dat_subset= read.csv(paste(directory,"/",formatC(i,width=3,flag="0"),
".csv",sep=""))
nobs=sapply(id,complete.cases(dat_subset))
}
return(data.frame(id,nobs))
}
complete("specdata",1)
complete=function(directory,id=1:332){
nobs=numeric()
for (i in id){
dat_subset= read.csv(paste(directory,"/",formatC(i,width=3,flag="0"),
".csv",sep=""))
nobs=sapply(id,sum(complete.cases(dat_subset)))
}
return(data.frame(id,nobs))
}
complete=function(directory,id=1:332){
nobs=numeric()
for (i in id){
dat_subset= read.csv(paste(directory,"/",formatC(i,width=3,flag="0"),
".csv",sep=""))
nobs=sapply(id,sum(complete.cases(dat_subset)))
}
return(data.frame(id,nobs))
}
complete("specdata",1)
help(solve)
setwd("~/GitHub/ProgrammingAssignment2")
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix(1:4,2,2)) {
m=NULL
set=function(y){
x<<-y
m<<-NULL
}
get=function() x
setmatrix=function(solve) m<<-solve
getmatrix=function()m
list(set=set,get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m=x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
## Return a matrix that is the inverse of 'x'
data=x$get()
m=solve(data,...)
x$setmatrix(m)
}
makeCacheMatrix
makeCacheMatrix(1:4,2,2)
makeCacheMatrix(1:4)
cacheSolve(1:4)
cacheSolve
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m=NULL
set=function(y){
x<<-y
m<<-NULL
}
get=function() x
setmatrix=function(solve) m<<-solve
getmatrix=function()m
list(set=set,get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m=x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
## Return a matrix that is the inverse of 'x'
data=x$get()
m=solve(data,...)
x$setmatrix()
}
cacheSolve()
makeCacheMatrix()
cacheSolve
cacheSolve(1)
cacheSolve(1:4,2,2)
##---cacheMatrix.R---
## This script contains two functions: makeCacheMatrix and cacheSolve
## makeCacheMatrix is designed to create a matrix that can cache the
## inverse of a matrix, using the solve function.
## cacheSolve is designed to compute the inverse of the matrix created
## in the makeCacheMatrix function, using the cached solution if it
## had already been calculated by the previous function to save time.
## makeCacheMatrix --- A function that creates a matrix to cache the inverse of
##                     that matrix.
makeCacheMatrix <- function(x = matrix()) {
m=NULL
set=function(y){
x<<-y
m<<-NULL
}
get=function() x
setmatrix=function(solve) m<<-solve
getmatrix=function()m
list(set=set,get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
## cacheSolve --- A function to return the inverse of a matrix, either by
##                calculating it, or returning the previously cached inverse.
cacheSolve <- function(x, ...) {
m=x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
## Return a matrix that is the inverse of 'x'
data=x$get()
m=solve(data,...)
x$setmatrix()
}
makeCacheMatrix
cacheSolve
##---cacheMatrix.R---
## This script contains two functions: makeCacheMatrix and cacheSolve
## makeCacheMatrix is designed to create a matrix that can cache the
## inverse of a matrix, using the solve function.
## cacheSolve is designed to compute the inverse of the matrix created
## in the makeCacheMatrix function, using the cached solution if it
## had already been calculated by the previous function to save time.
## makeCacheMatrix --- A function that creates a matrix to cache the inverse of
##                     that matrix.
makeCacheMatrix <- function(x = matrix()) {
m=NULL
set=function(y){
x<<-y
m<<-NULL
}
get=function(x)
setmatrix=function(solve) m<<-solve
getmatrix=function(m)
list(set=set,get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
## cacheSolve --- A function to return the inverse of a matrix, either by
##                calculating it, or returning the previously cached inverse.
cacheSolve <- function(x, ...) {
m=x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
## Return a matrix that is the inverse of 'x'
data=x$get()
m=solve(data,...)
x$setmatrix()
}
makeCacheMatrix(1:4)
makeCacheMatrix
cacheSolve(1:4)
x=1:4
cacheSolve(x)
